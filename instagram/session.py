from instagrapi import Client
from instagrapi.exceptions import LoginRequired
from database.models import guardar_token, obtener_token, limpiar_sesion
from instagrapi.exceptions import ChallengeRequired
from instagrapi.exceptions import TwoFactorRequired
from config import PROXIES
import requests
from instagrapi.exceptions import LoginRequired, TwoFactorRequired

cl = Client()

def autenticar_con_2fa(username, password):
    """
    Autentica en Instagram y gestiona el caso en que se requiera 2FA.
    """
    try:
        print(f"üîê Iniciando sesi√≥n para @{username}")
        cl.login(username, password)  # Intentar autenticaci√≥n normal
        print(f"‚úÖ Sesi√≥n iniciada correctamente para @{username}")
        return {"authenticated": True, "2fa_required": False}
    except TwoFactorRequired as e:
        print(f"‚ö†Ô∏è Se requiere 2FA para @{username}")
        return {"authenticated": False, "2fa_required": True, "error": str(e)}
    except Exception as e:
        print(f"‚ùå Error durante la autenticaci√≥n: {e}")
        raise Exception(f"Error de autenticaci√≥n: {e}")

def validar_codigo_2fa(code):
    """
    Verifica el c√≥digo 2FA y completa la autenticaci√≥n.
    """
    try:
        print(f"üîë Verificando c√≥digo 2FA: {code}")
        cl.two_factor_login(code)  # Validar el c√≥digo 2FA con la API de Instagram
        print("‚úÖ C√≥digo 2FA verificado correctamente")
        return {"authenticated": True, "message": "Sesi√≥n iniciada correctamente con 2FA"}
    except Exception as e:
        print(f"‚ùå Error al verificar el c√≥digo 2FA: {e}")
        return {"authenticated": False, "error": str(e)}



def iniciar_sesion(username, password):
    try:
        cl.login(username, password)
        print("Sesi√≥n iniciada correctamente.")
    except ChallengeRequired:
        print("Se requiere resolver un desaf√≠o de seguridad.")
        challenge_url = cl.last_json.get("challenge", {}).get("url")
        if challenge_url:
            try:
                cl.challenge_resolve(challenge_url)
                print("Desaf√≠o resuelto autom√°ticamente.")
            except Exception as e:
                print(f"No se pudo resolver el desaf√≠o autom√°ticamente: {e}")
                print("Es necesario que inicies sesi√≥n manualmente.")
                raise
    except Exception as e:
        print(f"Error al iniciar sesi√≥n: {e}")
        raise

def iniciar_sesion_persistente(username, password):
    """
    Intenta iniciar sesi√≥n utilizando una sesi√≥n guardada, o inicia una nueva sesi√≥n.
    """
    try:
        # Intenta cargar la sesi√≥n desde la base de datos o archivo
        settings = obtener_token(username)
        if settings:
            cl.set_settings(settings)
            cl.get_timeline_feed()  # Valida la sesi√≥n
            print(f"‚úÖ Sesi√≥n restaurada para @{username}.")
            return
        else:
            print(f"No se encontr√≥ sesi√≥n guardada para @{username}, iniciando una nueva.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al restaurar sesi√≥n: {e}")

    # Si no hay sesi√≥n o es inv√°lida, inicia una nueva
    try:
        cl.login(username, password)
        guardar_token(username, cl.get_settings())  # Guarda la nueva sesi√≥n
        print("‚úÖ Sesi√≥n iniciada y guardada correctamente.")
    except Exception as e:
        print(f"‚ùå Error al iniciar sesi√≥n: {e}")
        raise




def autenticar_bot(username, password):
    """
    Autentica al bot en Instagram usando las credenciales proporcionadas.
    """
    try:
        print(f"Iniciando sesi√≥n en Instagram para @{username}...")
        cl.login(username, password)
        print("‚úÖ Sesi√≥n iniciada correctamente.")
    except TwoFactorRequired:
        code = input("Introduce el c√≥digo 2FA de tu aplicaci√≥n autenticadora: ")
        cl.two_factor_login(code)
        print("‚úÖ Sesi√≥n iniciada correctamente con 2FA.")
    except LoginRequired:
        print("‚ùå Se requiere iniciar sesi√≥n nuevamente. Intenta resolver manualmente.")
        raise
    except Exception as e:
        print(f"‚ùå Error durante la autenticaci√≥n en Instagram: {e}")
        raise



def verificar_autenticacion():
    try:
        cl.get_timeline_feed()  # Validar sesi√≥n
        print("‚úÖ Autenticaci√≥n verificada correctamente.")
        return True
    except LoginRequired:
        print("‚ö†Ô∏è La sesi√≥n no es v√°lida. Se requiere login.")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado al verificar autenticaci√≥n: {e}")
        return False



def reconectar_si_es_necesario(func):
    """
    Decorador para reintentar una funci√≥n en caso de error de conexi√≥n o sesi√≥n expirada.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except LoginRequired:
            print("‚ö†Ô∏è Sesi√≥n expirada. Reintentando autenticaci√≥n...")
            if not verificar_autenticacion():
                raise Exception("‚ö†Ô∏è No se pudo autenticar autom√°ticamente.")
            return func(*args, **kwargs)
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            raise
    return wrapper




def manejar_login(username, password, intentos=3):
    while intentos > 0:
        if verificar_autenticacion():
            print(f"‚úÖ Sesi√≥n ya v√°lida para @{username}.")
            return True
        try:
            print(f"Intentando iniciar sesi√≥n para @{username}...")
            iniciar_sesion(username, password)
            print(f"‚úÖ Sesi√≥n iniciada correctamente para @{username}.")
            return True
        except Exception as e:
            print(f"‚ùå Error al iniciar sesi√≥n: {e}")
            intentos -= 1
            if intentos > 0:
                print(f"Reintentando... Intentos restantes: {intentos}")
            else:
                print("‚ö†Ô∏è No se pudo iniciar sesi√≥n tras varios intentos.")
                raise


def verificar_sesion():
    """
    Verifica si la sesi√≥n de Instagram es v√°lida.
    """
    try:
        cl.get_timeline_feed()
        print("‚úÖ Sesi√≥n verificada correctamente.")
        return True
    except LoginRequired:
        print("‚ùå Sesi√≥n no v√°lida. Es necesario iniciar sesi√≥n nuevamente.")
        return False
    except Exception as e:
        print(f"‚ùå Error al verificar la sesi√≥n: {e}")
        return False




def configurar_cliente():
    cl.set_device({
        "app_version": "269.0.0.18.75",
        "android_version": 26,
        "android_release": "8.0.0",
        "dpi": "480dpi",
        "resolution": "1080x1920",
        "manufacturer": "Samsung",
        "device": "Galaxy S10",
        "model": "SM-G973F",
        "cpu": "exynos9820",
        "version_code": "269185202"
    })
    cl.set_user_agent(
        "Instagram 269.0.0.18.75 Android (26/8.0.0; 480dpi; 1080x1920; Samsung; Galaxy S10; exynos9820; en_US; 269185202)"
    )
    cl.set_proxy(PROXIES["http"])
