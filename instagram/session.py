from instagrapi import Client
from instagrapi.exceptions import LoginRequired
from database.models import guardar_token, obtener_token,collection_users, borrar_token
from instagrapi.exceptions import TwoFactorRequired
from config import PROXIES
from flask import session
from instagrapi.exceptions import LoginRequired, TwoFactorRequired
import logging
from instagrapi.exceptions import ChallengeRequired
cl = Client()

from instagrapi.exceptions import TwoFactorRequired

def autenticar_con_2fa(username, password):
    """
    Autentica en Instagram y maneja el caso en que se requiera 2FA.
    """
    try:
        print(f"üîê Iniciando sesi√≥n para @{username}")
        cl.login(username, password)
        print(f"‚úÖ Sesi√≥n iniciada correctamente para @{username}")
        return {"authenticated": True, "2fa_required": False}
    except TwoFactorRequired as e:
        print(f"‚ö†Ô∏è Se requiere 2FA para @{username}")
        return {"authenticated": False, "2fa_required": True, "error": str(e)}
    except Exception as e:
        print(f"‚ùå Error durante la autenticaci√≥n: {e}")
        return {"authenticated": False, "error": str(e)}

def manejar_2fa(codigo_2fa):
    """
    Enviar el c√≥digo de 2FA cuando sea requerido.
    """
    try:
        # Usamos el m√©todo correcto para completar el login con 2FA
        result = cl.complete_two_factor_login(codigo_2fa)

        if result:
            print("‚úÖ C√≥digo 2FA verificado correctamente.")
            return {"authenticated": True}
        else:
            return {"authenticated": False, "error": "C√≥digo incorrecto o sesi√≥n inv√°lida."}
    except Exception as e:
        print(f"‚ùå Error al verificar el c√≥digo 2FA: {e}")
        return {"authenticated": False, "error": str(e)}



def reautenticar_sesion():
    """
    Reautentica la sesi√≥n de Instagram utilizando las credenciales almacenadas.
    """
    username = session.get('instagram_user')
    password = session.get('instagram_password')

    if not username or not password:
        print("[ERROR] No se encontraron las credenciales en la sesi√≥n.")
        return False

    try:
        print(f"üîë Reautenticando sesi√≥n de Instagram para @{username}...")
        cl.login(username, password)
        session['instagram_client'] = cl.get_settings()  # Actualiza los datos de sesi√≥n en Flask
        print("‚úÖ Sesi√≥n reautenticada correctamente.")
        return True
    except Exception as e:
        print(f"‚ùå Error al reautenticar la sesi√≥n: {e}")
        return False
    

def verificar_autenticacion():
    """
    Verifica si la sesi√≥n de Instagram es v√°lida. Si no lo es, intenta renovarla.
    """
    try:
        cl.get_timeline_feed()  # Prueba la sesi√≥n activa
        print("‚úÖ Sesi√≥n de Instagram v√°lida.")
        return True
    except LoginRequired:
        print("‚ö†Ô∏è Sesi√≥n no v√°lida. Intentando renovar...")
        return reautenticar_sesion()
    except Exception as e:
        print(f"‚ùå Error al verificar la autenticaci√≥n: {e}")
        return False


def iniciar_sesion(username, password):
    try:
        cl.login(username, password)
        print("Sesi√≥n iniciada correctamente.")
    except ChallengeRequired:
        print("Se requiere resolver un desaf√≠o de seguridad.")
        challenge_url = cl.last_json.get("challenge", {}).get("url")
        if challenge_url:
            try:
                cl.challenge_resolve(challenge_url)
                print("Desaf√≠o resuelto autom√°ticamente.")
            except Exception as e:
                print(f"No se pudo resolver el desaf√≠o autom√°ticamente: {e}")
                print("Es necesario que inicies sesi√≥n manualmente.")
                raise
    except Exception as e:
        print(f"Error al iniciar sesi√≥n: {e}")
        raise


logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def iniciar_sesion_persistente(username, password):
    try:
        # Intentar cargar sesi√≥n
        settings = obtener_token(username)
        if settings:
            try:
                cl.set_settings(settings)
                cl.get_timeline_feed()
                logging.info(f"Sesi√≥n restaurada para @{username}")
                return True
            except EOFError:
                logging.error(f"Error EOF al cargar sesi√≥n para @{username}. Se borrar√° la sesi√≥n.")
                borrar_token(username)  # Funci√≥n para borrar el token guardado
            except Exception as e:
                logging.error(f"Error al cargar sesi√≥n para @{username}: {e}")
        else:
            logging.info(f"No se encontr√≥ sesi√≥n guardada para @{username}")
    except Exception as e:
        logging.error(f"Error al intentar cargar sesi√≥n para @{username}: {e}")

    # Iniciar sesi√≥n desde cero si falla la carga o no hay sesi√≥n
    try:
        cl.login(username, password)
        guardar_token(username, cl.get_settings())
        logging.info(f"Sesi√≥n iniciada y guardada para @{username}")
        return True
    except Exception as e:
        logging.error(f"Error al iniciar sesi√≥n para @{username}: {e}")
        return False



def guardar_sesion(username):
    settings = cl.get_settings()
    # Guarda las configuraciones de sesi√≥n en tu base de datos
    collection_users.update_one({"username": username}, {"$set": {"settings": settings}}, upsert=True)
    print(f"‚úÖ Sesi√≥n guardada para @{username}")

def cargar_sesion(username):
    user = collection_users.find_one({"username": username})
    if user and "settings" in user:
        cl.set_settings(user["settings"])
        print(f"‚úÖ Sesi√≥n cargada para @{username}")




def autenticar_bot(username, password):
    print(f"[DEBUG] üîê Intentando iniciar sesi√≥n persistente para @{username}...")
    try:
        # Intentar restaurar una sesi√≥n persistente
        iniciar_sesion_persistente(username, password)
        print("[DEBUG] ‚úÖ Sesi√≥n persistente restaurada o iniciada correctamente.")
        return {"authenticated": True, "message": "‚úÖ Sesi√≥n iniciada correctamente."}
    except TwoFactorRequired as e:
        print("[DEBUG] ‚ö†Ô∏è Se requiere 2FA para este usuario.")
        return {"2fa_required": True, "message": "‚ö†Ô∏è Se requiere autenticaci√≥n 2FA. Ingresa el c√≥digo."}
    except Exception as e:
        print(f"[DEBUG] ‚ùå Error al intentar restaurar sesi√≥n persistente: {e}")
    
    # Si no se pudo restaurar la sesi√≥n persistente, intentar una nueva autenticaci√≥n
    print(f"[DEBUG] üîê Iniciando nueva sesi√≥n en Instagram para @{username}...")
    try:
        cl.login(username, password)
        print("[DEBUG] ‚úÖ Nueva sesi√≥n iniciada correctamente en Instagram.")
        return {"authenticated": True, "message": "‚úÖ Nueva sesi√≥n iniciada correctamente."}
    except TwoFactorRequired as e:
        print("[DEBUG] ‚ö†Ô∏è Se requiere 2FA para este usuario.")
        return {"2fa_required": True, "message": "‚ö†Ô∏è Se requiere autenticaci√≥n 2FA. Ingresa el c√≥digo."}
    except Exception as e:
        print(f"[DEBUG] ‚ùå Error al autenticar en Instagram: {e}")
        return {"authenticated": False, "error": str(e)}

def reautenticar_si_es_necesario():
    try:
        cl.get_timeline_feed()
        print("‚úÖ Sesi√≥n activa verificada.")
    except LoginRequired:
        print("‚ö†Ô∏è Sesi√≥n expirada. Reintentando autenticaci√≥n...")
        username = session.get('instagram_user')
        password = session.get('instagram_password')
        if username and password:
            cl.login(username, password)
            print("‚úÖ Sesi√≥n renovada exitosamente.")
        else:
            raise Exception("‚ö†Ô∏è Credenciales no disponibles para renovar la sesi√≥n.")


def verificar_autenticacion():
    try:
        cl.get_timeline_feed()  # Valida la sesi√≥n activa
        print("‚úÖ Sesi√≥n de Instagram v√°lida.")
        return True
    except LoginRequired:
        print("‚ö†Ô∏è Sesi√≥n no v√°lida. Reintentando autenticaci√≥n...")
        username = session.get('instagram_user')
        password = session.get('instagram_password')
        if username and password:
            try:
                cl.login(username, password)
                print("‚úÖ Sesi√≥n renovada con √©xito.")
                return True
            except Exception as e:
                print(f"‚ùå Error al reautenticar: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error al verificar la autenticaci√≥n: {e}")
        return False




def manejar_login(username, password, intentos=3):
    while intentos > 0:
        if verificar_autenticacion():
            print(f"‚úÖ Sesi√≥n ya v√°lida para @{username}.")
            return True
        try:
            print(f"Intentando iniciar sesi√≥n para @{username}...")
            iniciar_sesion(username, password)
            print(f"‚úÖ Sesi√≥n iniciada correctamente para @{username}.")
            return True
        except Exception as e:
            print(f"‚ùå Error al iniciar sesi√≥n: {e}")
            intentos -= 1
            if intentos > 0:
                print(f"Reintentando... Intentos restantes: {intentos}")
            else:
                print("‚ö†Ô∏è No se pudo iniciar sesi√≥n tras varios intentos.")
                raise


def verificar_sesion():
    """
    Verifica si la sesi√≥n de Instagram es v√°lida.
    """
    try:
        cl.get_timeline_feed()
        print("‚úÖ Sesi√≥n verificada correctamente.")
        return True
    except LoginRequired:
        print("‚ùå Sesi√≥n no v√°lida. Es necesario iniciar sesi√≥n nuevamente.")
        return False
    except Exception as e:
        print(f"‚ùå Error al verificar la sesi√≥n: {e}")
        return False




def configurar_cliente():
    cl.set_device({
        "app_version": "269.0.0.18.75",
        "android_version": 26,
        "android_release": "8.0.0",
        "dpi": "480dpi",
        "resolution": "1080x1920",
        "manufacturer": "Samsung",
        "device": "Galaxy S10",
        "model": "SM-G973F",
        "cpu": "exynos9820",
        "version_code": "269185202"
    })
    cl.set_user_agent(
        "Instagram 269.0.0.18.75 Android (26/8.0.0; 480dpi; 1080x1920; Samsung; Galaxy S10; exynos9820; en_US; 269185202)"
    )
    cl.set_proxy(PROXIES["http"])
